#!/usr/bin/python
###############################################################################
#
# sabx10 - an SABX file manipulation library
# Copyright (C) 2009, 2010 Jay Farrimond (jay@sabikerides.com)
#
# This file is part of sabx10.
#
# sabx10 is free software: you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# sabx10 is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# sabx10.  If not, see <http://www.gnu.org/licenses/>.
#
###############################################################################
"""
NAME

    sabx_seg_closest - find the closest point in a segment

SYNOPSIS

    sabx_seg_closest [OPTION] seg_id

DESCRIPTION

    For a given stop, poi, or waypoint, find the closest point to it in a given
    segment. Specify either a poi, a stop, or a waypoint.

    seg_id
        id of segment to check against

    -i INFILE, --infile=INFILE
        SABX 1.0 file to read from

    -p POI, --poi=POI
        id of poi to check

    -s STOP, --stop=STOP
        id of stop to check

    -w WAYPOINT, --waypoint=WAYPOINT
        id of waypoint to check

    -m, --man
        print this extended help and exit

    -h, --help
        print basic help and exit

AUTHOR

    Jay Farrimond

REPORTING BUGS

    Report bugs to <jay@sabikerides.com>

SEE ALSO

    The complete specification for SABX 1.0 files is available at 
    http://www.sabikerides.com/sabx/1/0/

    The library that this utility is built on (sabx-lib) is available at
    http://www.sabikerides.com/sabx/lib/index.html

COPYRIGHT

    sabx10 - an SABX file manipulation library
    Copyright (C) 2009, 2010 Jay Farrimond (jay@sabikerides.com)

    This file is part of sabx10.

    sabx10 is free software: you can redistribute it and/or modify it under the
    terms of the GNU General Public License as published by the Free Software
    Foundation, either version 3 of the License, or (at your option) any later
    version.

    sabx10 is distributed in the hope that it will be useful, but WITHOUT ANY
    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
    FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
    details.

    You should have received a copy of the GNU General Public License along
    with sabx10.  If not, see <http://www.gnu.org/licenses/>.
"""

import getopt
import sys

from sabx10.oxm import parse_no_def_namespaces, parse_tree
from sabx10.utils import search_seg

def usage():
    """
    Print the usage message for the program.
    """
    print """Usage: sabx_seg_closest [options] seg_id

Options:
  -h, --help              show this help message and exit
  -m, --man-page          display the man page and exit
  -i INFILE, --infile=INFILE
                          input sabx data from FILE
  -p POI, --poi=POI       id of poi to check
  -s STOP, --stop=STOP    id of stop to check
  -w WAYPOINT, --waypoint=WAYPOINT
                          id of waypoint to check"""

def handle_options():
    """
    Process the command line, retrieving the relevant data.
    """
    # init the local vars
    in_file = sys.stdin
    segment = None
    poi = None
    stop = None
    waypoint = None

    # get the options
    try:
        opts, args = getopt.getopt(sys.argv[1:], "hmi:p:s:w:", 
                                   ["help", "man-page", "infile=", 
                                    "poi=", "stop=", "waypoint="])
    except getopt.GetoptError, err:
        print str(err)
        usage()
        sys.exit(2)

    # get the optional arguments
    for o, a in opts:
        if o in ("-i", "--infile"):
            in_file = a
        elif o in ("-p", "--poi"):
            poi = a
        elif o in ("-s", "--stop"):
            stop = a
        elif o in ("-w", "--waypoint"):
            waypoint = a
        elif o in ("-h", "--help"):
            usage()
            sys.exit(0)
        elif o in ("-m", "--man-page"):
            print __doc__
            sys.exit(0)
        else:
            usage()
            sys.exit(2)

    # get the required segment id
    if len(args) != 1:
        print "WRONG NUMBER OF ARGUMENTS GIVEN"
        usage()
        sys.exit(2)
    segment = args[0]

    # make sure we got everything we need
    if segment is None or (poi is None and stop is None and waypoint is None):
        print "SEG_ID AND POI OR STOP ARE REQUIRED"
        usage()
        sys.exit(2)

    return in_file, segment, poi, stop, waypoint

if __name__ == '__main__':
    try:
        in_file, segment, poi, stop, waypoint = handle_options()
        tree = parse_no_def_namespaces(in_file)
        sabx = parse_tree(tree)
        if stop is not None:
            search_seg(sabx, segment, 
                       sabx['stop_dict'][stop].lat, sabx['stop_dict'][stop].lon)
        elif poi is not None:
            search_seg(sabx, segment, 
                       sabx['poi_dict'][poi].lat, sabx['poi_dict'][poi].lon)
        else:
            for seg in sabx['seg_list']:
                for pt in seg.waypoints:
                    if pt.id == waypoint:
                        search_seg(sabx, segment, pt.lat, pt.lon)
    except Exception as exc:
        print "ERROR ENCOUNTERED: %s" % exc
        sys.exit(2)
