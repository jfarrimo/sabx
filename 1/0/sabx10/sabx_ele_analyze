#!/usr/bin/python
###############################################################################
#
# sabx10 - an SABX file manipulation library
# Copyright (C) 2009, 2010 Jay Farrimond (jay@sabikerides.com)
#
# This file is part of sabx10.
#
# sabx10 is free software: you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# sabx10 is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# sabx10.  If not, see <http://www.gnu.org/licenses/>.
#
###############################################################################
"""
NAME

    sabx_ele_analyze - analyze the elevations for an SABX 1.0 file

SYNOPSIS

    sabx_ele_analyze [OPTION]

DESCRIPTION

    For a given SABX 1.0 file, analyze its elevations. Specifically, check the
    differences in the elevations between the end of each segment and the start
    of the next segment in each ride.  Check this for the ele and the usgs
    values. When the ele and usgs changes fall outside the acceptable range,
    graph them.  The acceptable range is defined as a percentage of the
    difference between the lowest and highest elevations.

    -i INFILE, --infile=INFILE
        SABX 1.0 file to read from

    -m, --man
        print this extended help and exit

    -h, --help
        print basic help and exit

AUTHOR

    Jay Farrimond

REPORTING BUGS

    Report bugs to <jay@sabikerides.com>

SEE ALSO

    The complete specification for SABX 1.0 files is available at
    http://www.sabikerides.com/sabx/1/0/

    The library that this utility is built on (sabx-lib) is available at
    http://www.sabikerides.com/sabx/lib/index.html

COPYRIGHT

    sabx10 - an SABX file manipulation library
    Copyright (C) 2009, 2010 Jay Farrimond (jay@sabikerides.com)

    This file is part of sabx10.

    sabx10 is free software: you can redistribute it and/or modify it under the
    terms of the GNU General Public License as published by the Free Software
    Foundation, either version 3 of the License, or (at your option) any later
    version.

    sabx10 is distributed in the hope that it will be useful, but WITHOUT ANY
    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
    FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
    details.

    You should have received a copy of the GNU General Public License along
    with sabx10.  If not, see <http://www.gnu.org/licenses/>.
"""

import getopt
import sys

from sabx10.oxm import parse_no_def_namespaces, process_rides
from sabx10.utils import analyze_all_rides

def usage():
    """
    Print the usage message for the program.
    """
    print """Usage: sabx_ele_analyze [options]

Options:
  -h, --help              show this help message and exit
  -m, --man-page          display the man page and exit
  -i INFILE, --infile=INFILE
                          input sabx data from FILE"""

def handle_options():
    """
    Process the command line, retrieving the relevant data.
    """
    # init the local vars
    in_file = sys.stdin

    # get the options
    try:
        opts, args = getopt.getopt(sys.argv[1:], "hmi:", 
                                   ["help", "man-page", "infile="])
    except getopt.GetoptError, err:
        print str(err)
        usage()
        sys.exit(2)

    # get the optional arguments
    for o, a in opts:
        if o in ("-i", "--infile"):
            in_file = a
        elif o in ("-h", "--help"):
            usage()
            sys.exit(0)
        elif o in ("-m", "--man-page"):
            print __doc__
            sys.exit(0)
        else:
            usage()
            sys.exit(2)

    return in_file

if __name__ == '__main__':
    try:
        sabx_file = handle_options()
        tree = parse_no_def_namespaces(sabx_file)
        rides, bounds = process_rides(tree, False)
        analyze_all_rides(rides)
    except Exception as exc:
        print "ERROR ENCOUNTERED: %s" % exc
        sys.exit(2)
